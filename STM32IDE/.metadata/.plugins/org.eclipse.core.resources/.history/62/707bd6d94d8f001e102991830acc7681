/*
 * scheduler.c
 *
 *  Created on: Nov 29, 2023
 *      Author: ACER
 */

#include "scheduler.h"

typedef struct {
	// Pointer to the task (must be a ’void(void)’ function )
	void (* pTask)(void);
	// Delay (tick) until the function will (next) be run
	uint32_t Delay;
	// Interval (tick) between subsequent runs
	uint32_t Period;
	// Incremented (by scheduler) when task is due to execute
	uint8_t RunMe;
	uint32_t TaskID;
} sTasks;

sTasks SCH_Tasks_G[SCH_MAX_TASKS];
unsigned char SCH_Error_G;

void SCH_Init(void)
{
	unsigned char i;
	while(i < SCH_MAX_TASKS) {
		SCH_Delete_Task(i++);
	}
	SCH_Error_G = 0;
}

void SCH_Update(void)
{
	uint32_t Index;
	for(Index = 0; Index < SCH_MAX_TASKS; ++Index) {
		if(SCH_Tasks_G[Index].pTask == 0x0000) continue;

		if(SCH_Tasks_G[Index].Delay == 0)
		{
			++ SCH_Tasks_G[Index].RunMe;
			if(SCH_Tasks_G[Index].Period) {
				SCH_Tasks_G[Index].Delay = SCH_Tasks_G[Index].Period;
			}
		}
		else
		{
			-- SCH_Tasks_G[Index].Delay;
		}
	}
}

void SCH_Dispatch_Tasks(void)
{
	uint32_t Index;
	for(Index = 0; Index < SCH_MAX_TASKS; ++Index) {
		if(SCH_Tasks_G[Index].RunMe <= 0) continue;

		(*SCH_Tasks_G[Index].pTask)();
		-- SCH_Tasks_G[Index].RunMe;
		if(SCH_Tasks_G[Index].Period == 0) {
			SCH_Delete_Task(Index);
		}
	}
}

uint32_t SCH_Add_Tasks(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
	uint32_t Index;
	while((SCH_Tasks_G[Index].pTask != 0x0000) && (Index < SCH_MAX_TASKS)) {
		++ Index;
	}
	if(Index == SCH_MAX_TASKS) {
		SCH_Error_G = ERROR_SCH_TOO_MANY_TASKS;
		return SCH_MAX_TASKS;
	}
	SCH_Tasks_G[Index].pTask = pFunction;
	SCH_Tasks_G[Index].Delay = DELAY;
	SCH_Tasks_G[Index].Period = PERIOD;
	SCH_Tasks_G[Index].RunMe = 0;
	return Index;
}

uint8_t SCH_Delete_Task(uint32_t taskID){
	uint8_t Return_code  = 0;
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
				Return_code = 1;
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
				}
				SCH_tasks_G[j].pTask = 0;
				SCH_tasks_G[j].Period = 0;
				SCH_tasks_G[j].Delay = 0;
				SCH_tasks_G[j].RunMe = 0;
				SCH_tasks_G[j].TaskID = 0;
				return Return_code;
			}
		}
	}
	return Return_code; // return status
}

